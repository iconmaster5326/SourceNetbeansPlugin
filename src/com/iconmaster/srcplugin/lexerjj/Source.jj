/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

//C:\Users\iconmaster\Desktop\javacc-5.0\bin\javacc.bat Source.jj

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
  JDK_VERSION = "1.5";
  BUILD_PARSER = false;
}

PARSER_BEGIN(SourceParser)

package com.iconmaster.srcplugin.lexerjj;

public class SourceParser {}

PARSER_END(SourceParser)

/* TOKENS */

TOKEN : { 
	< WHITESPACE: [" ","\t","\n","\r","\f"] >
}

TOKEN : { 
	<COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

TOKEN : { 
	<BLOCK_COMMENT: "/*" (~["*"] (~["/"])?)* "*/">
}

TOKEN : { 
	<DIRECTIVE: "@" (~[" ","\t","\n","\r","\f"])* ([" ","\t","\n","\r","\f"])?>
}

TOKEN : { 
	< KEYWORD: "local" | "function" | "and" | "or" | "not" | "for" | "in" | "as" | "return" | "break" | "struct" | "if" | "else" | "elseif" | "while" | "repeat" | "until" | "field" | "package" | "import" | "struct" | "enum" | "true" | "false" | "iterator" | "extends" | "to" | "new" | "type" | "class" >
}

TOKEN : { 
	< WORD: <WORD_B> (<WORD_E>)* > | < #WORD_B: ["a"-"z"] | ["A"-"Z"] | "_" | "?" > | < #WORD_E: <WORD_B> | ["0"-"9"] >
}

TOKEN : { 
	< NUMBER: ["0"-"9"] | "." >
}

TOKEN : {
	< STRING: "\"" (~["\""])* "\"" >
}

TOKEN : {
	< CHAR: "\'" ~["\'"] "\'" >
}

TOKEN : {
	< SYMBOL: ["+","-","*","/","=","<",">","~","!","&","|","(",")","[","]","{","}",",","#","$","%","^","&","\\","~","`",":",";","\"","'"] >
}